/* test_c -- an attempt to put the lexer through the ringer */
//The reason why this is called "test_c" instead of "test.c"
//is so that the makefile won't attempt to compile it

//STRING LITERALS
//"THIS IS #&*%!"
//"\"Don't \n\t\t\nforget\""

//CHARACTER LITERALS


// You may assume the following limits on numbers:
// 2147483647 is the maximum unsigned integer: 2^31-1

//floating point can range from 1.17549E-38 to 3.402823E+38
// we will assume that at most 8 significant mantissa digits can be carried.



//NUMBERS
//1
//12
//123
//12345
//123456
//123456123456123456



//TRICKY OPERATOR TESTING

//+++++   //should be 2 INCREMENTS and one ADDITION
//++=     //should be an INCREMENT and an ASSIGNMENT
//+==     //should be a PLUS_EQUALS and an ASSIGNMENT
//&&=     //should be a BOOLEAN_AND and an ASSIGNMENT
//&&==    //should be a BOOLEAN_AND and an EQUALS
//||=     //should be a BOOLEAN_OR and an ASSIGNMENT
//|||=|   //should be a BOOLEAN_OR an BITWISE_OR_EQUALS and a BITWISE_OR

//+++++++=+==&&=&&==||=|||=|/**/    //should be 3 INCREMENTS, 2 PLUS_EQUALS, an ASSIGNMENT, a BOOLEAN_AND, an ASSIGNMENT, a BOOLEAN_AND, an EQUALS, a BOOLEAN_OR, an ASSIGNMENT, a BOOLEAN_OR, a BITWISE_OR_EQUALS, a BITWISE_OR, and a block-style comment of 0-length



//SAMPLE PROGRAM BEGINS BELOW

/*
int do_it(int x)
{
    int i = x * x;
    return i;
}

int main(void)
{
    int a = 6;
    int b = 7;
    int c;
    int d = do_it(b);
    int e;
    c = a + b;
    e = d / c;
    
    return 0;
}
*/



/*
 * =====================================================================================
 *
 *       Filename:  mycompiler.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  7/18/2011 17:15:50
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Michael Diaz-Tello (MDT)
 *        Company:  
 *
 * =====================================================================================
 */

//#include <stdio.h>
//#include "token.h"
//#include "lexer.h"
//#include "scanner.h"

//char a;
//short b;
//typedef int c;
//extern long d;

/*
int l(long b, char c, char d, char f)
{
    //int abcde;
    //a+b+c+d;
    //a-b-c-d;
    //a*b+c*d;
    //;
    //;
    //a || b || c || d;
    //a && b && c && d;
    //a*b*c*d;
    //a/b/c/d;
    //a%b%c%d;
    //a|b|c|d;
    //a&b&c&d;
    //a^b^c;
    //(a&(b|c)&d);
    //a==b != c;
    //a<<b<<c;
    //a>>b>>c;

    //a> b > c;
    //a < b < c;
    //a>=b>=c;
    //a<=b<=c;

    //;
    //;
    //a = b*c;
    //a = b+a;
    //a = b/d;
    //a = b&q;
    //*a+*a+*a;

    //if( a == b ) 
    //{
    //    a+b;
    //    b+c;
    //    c*d;
    //    d||e;
    //    e&&f;
    //}

    //a(b, c);
    //f(a, b);

    //if( b(c)) 
    //{
        //;
    //}

    //A(a,b,c)(a);

    printf("woohoo!\n");
    printf("1");
    
    //a = b;
    //q = ***f/(*t);


    //a =  +c/(d/e)*f - g -h;
    //a = b + c / d * e;
    //a *b / c*d;
    //a*b/c*d;

    //a = b || a || c || d;
    //a = b && a && c && d;
    //a = b && i || a && j || c && k || d && l;
    //(b && i) || (a && j) || (c && k) || (d && l);
    //a % b;
    //a = b | c;
    //a = b ^ c;
    
   // abcd = b;
}
*/

//int fn(char a)
//{
//  //a = b;
//  //a = b + c;
//  //c = d*e;
//  //f = A(a) + B(b)*C(c);
//  return ;
//  //a = b && i || a && j || c && k || d && l;
//  //a = b && i || a && j || c && k || d && l;
////  int a; 
////  int b; 
////  int c; 
////  int d; 
////  int e; 
//}


/*
void test_lexer(void)
{
    //TOKEN t;
    printf("*** TESTING THE LEXER ***\n\n");
    if(EOFFLG == 0)
    {
        t = lex();
        //if(EOFFLG == 0)
        //{
            //printToken(t);
        //}
    }
    else
    {
        blah();
    }
    printf("\n*** DONE TESTING THE LEXER ***\n");
}

int main(void)
{
    ;
    init_scanner();
    test_lexer();
    printf("the total number of lines of source code is %lu\n", source_code_line_number);
    return 0;
}
*/

//char a;
//short b;
//typedef int c;
//extern long d;
int a0;
int b0;
int c0;

int main(void)
{
    int a1;
    int b1;
    a(1,2,3);
    b();
    c();
    int c1;
    {
        int a2;
        int b2;
        a();
        int c2;
        {
            int a3;
        }

    }

    d();
    e;
}

int d0;
int e0;

void f(int a, int b)
{
    f();
    a ^b ^c;
}
